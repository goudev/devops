apiVersion: v1
kind: Namespace
metadata:
  name: cicd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: drone
  namespace: cicd
data:
  DRONE_ADMIN: ${DRONE_ADMIN}
  DRONE_GITEA_CLIENT_ID: "alterar"
  DRONE_GITEA_CLIENT_SECRET: "alterar"
  DRONE_GITEA_SERVER: https://${GITEA_SERVER_URL}
  DRONE_GIT_ALWAYS_AUTH: "true"
  DRONE_GIT_PASSWORD: ${DRONE_GIT_PASSWORD}
  DRONE_GIT_USERNAME: ${DRONE_GIT_USERNAME}
  DRONE_REGISTRY_PLUGIN_ENDPOINT: http://${REGISTRY_URL}:5000
  DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
  DRONE_SERVER_HOST: ${DRONE_SERVER_HOST}
  DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO}
  DRONE_USER_CREATE: ${DRONE_USER_CREATE}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: drone-runner
  namespace: cicd
data:
  DRONE_DEBUG: "true"
  DRONE_REGISTRY_PLUGIN_ENDPOINT: http://${REGISTRY_URL}:5000
  DRONE_RPC_HOST: ${DRONE_SERVER_HOST}
  DRONE_RPC_PROTO: ${DRONE_SERVER_PROTO}
  DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
  DRONE_RUNNER_CAPACITY: 10
  DRONE_RUNNER_NAME: drone-pod
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone
  namespace: cicd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone
      version: v1
  template:
    metadata:
      labels:
        app: drone
        version: v1
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: drone
            optional: false
        image: drone/drone:2
        imagePullPolicy: Always
        name: drone
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: drone
      volumes:
      - hostPath:
          path: /storage/drone
          type: DirectoryOrCreate
        name: drone
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-runner
  namespace: cicd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-runner
      version: v1
  template:
    metadata:
      labels:
        app: drone-runner
        version: v1
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: drone-runner
            optional: false
        image: drone/drone-runner-docker:1.8.3-linux-arm64
        imagePullPolicy: Always
        name: drone-runner
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: drone
  namespace: cicd
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: drone
    version: v1
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: drone-runner
  namespace: cicd
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: drone-runner
    version: v1
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt
  namespace: cicd
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ${LETSENCRYPT_EMAIL}
    privateKeySecretRef:
      name: account-key
    solvers:
    - http01:
       ingress:
         class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: drone
  namespace: cicd
spec:
  secretName: drone-certificate
  issuerRef:
    name: letsencrypt
  dnsNames:
  - ${DRONE_SERVER_HOST}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drone
  namespace: cicd
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/proxy-body-size: "300m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
spec:
  tls:
  - hosts:
      - ${DRONE_SERVER_HOST}
    secretName: drone-certificate
  rules:
  - host: ${DRONE_SERVER_HOST}
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: drone
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific